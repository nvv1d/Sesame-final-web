// Audio Visualizer Class

class AudioVisualizer {
    constructor(canvas) {
        this.canvas = canvas;
        this.ctx = canvas.getContext('2d');
        this.level = 0;
        this.smoothedLevel = 0;
        this.frequencyBars = [];
        this.barCount = 32;
        this.animationFrame = null;
        
        // Initialize frequency bars with random heights
        for (let i = 0; i < this.barCount; i++) {
            this.frequencyBars.push(Math.random() * 0.3);
        }
        
        // Set canvas dimensions
        this.resizeCanvas();
        window.addEventListener('resize', this.resizeCanvas.bind(this));
        
        // Start the visualization loop
        this.draw();
    }
    
    resizeCanvas() {
        const parent = this.canvas.parentElement;
        this.canvas.width = parent.clientWidth;
        this.canvas.height = parent.clientHeight;
    }
    
    updateLevel(level) {
        // Level should be a value between 0 and 100
        this.level = Math.min(100, Math.max(0, level)) / 100;
    }
    
    draw() {
        // Clear the canvas
        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
        
        // Smooth the level for animation
        this.smoothedLevel = this.smoothedLevel * 0.8 + this.level * 0.2;
        
        // Parameters for visualization
        const centerX = this.canvas.width / 2;
        const centerY = this.canvas.height / 2;
        const maxRadius = Math.min(centerX, centerY) * 0.8;
        const activeRadius = maxRadius * (0.3 + this.smoothedLevel * 0.7);
        
        // Draw circular background
        this.ctx.beginPath();
        this.ctx.arc(centerX, centerY, maxRadius, 0, Math.PI * 2);
        this.ctx.fillStyle = 'rgba(192, 232, 192, 0.05)';
        this.ctx.fill();
        
        // Draw active circle
        this.ctx.beginPath();
        this.ctx.arc(centerX, centerY, activeRadius, 0, Math.PI * 2);
        this.ctx.strokeStyle = 'rgba(192, 232, 192, 0.5)';
        this.ctx.lineWidth = 2;
        this.ctx.stroke();
        
        // Update frequency bars
        for (let i = 0; i < this.barCount; i++) {
            // Make bars move based on level and some randomness
            if (Math.random() < 0.1) {
                this.frequencyBars[i] = Math.random() * this.smoothedLevel;
            } else {
                this.frequencyBars[i] = this.frequencyBars[i] * 0.95 + 
                                       (Math.random() * this.smoothedLevel) * 0.05;
            }
        }
        
        // Draw frequency bars around circle
        const barWidth = 4;
        const gapWidth = 2;
        
        for (let i = 0; i < this.barCount; i++) {
            const angle = (i / this.barCount) * Math.PI * 2;
            const height = maxRadius * 0.5 * this.frequencyBars[i];
            
            const x1 = centerX + Math.cos(angle) * activeRadius;
            const y1 = centerY + Math.sin(angle) * activeRadius;
            const x2 = centerX + Math.cos(angle) * (activeRadius + height);
            const y2 = centerY + Math.sin(angle) * (activeRadius + height);
            
            this.ctx.beginPath();
            this.ctx.moveTo(x1, y1);
            this.ctx.lineTo(x2, y2);
            this.ctx.strokeStyle = `rgba(192, 232, 192, ${0.3 + this.frequencyBars[i] * 0.7})`;
            this.ctx.lineWidth = barWidth;
            this.ctx.lineCap = 'round';
            this.ctx.stroke();
        }
        
        // Draw pulsing glow
        const glowSize = 20 + Math.sin(Date.now() * 0.002) * 10;
        this.ctx.beginPath();
        this.ctx.arc(centerX, centerY, activeRadius, 0, Math.PI * 2);
        this.ctx.shadowColor = 'rgba(192, 232, 192, 0.5)';
        this.ctx.shadowBlur = glowSize * this.smoothedLevel;
        this.ctx.strokeStyle = 'rgba(192, 232, 192, 0.2)';
        this.ctx.lineWidth = 4;
        this.ctx.stroke();
        this.ctx.shadowBlur = 0;
        
        // Continue animation loop
        this.animationFrame = requestAnimationFrame(this.draw.bind(this));
    }
    
    destroy() {
        if (this.animationFrame) {
            cancelAnimationFrame(this.animationFrame);
        }
    }
}